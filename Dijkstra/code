#include <iostream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include<stack>
using namespace std;
#define MAX_V 50       //最大城市数
#define MAX_E 1000      //最大路径数
#define INF 10000
int visit[MAX_V];             //是否被访问过,0表示未被访问，1表示已访问过,弃用visit[0]
int dis[MAX_V];      		 //保存源点到各点的最小距离,弃用dis[0]
int path[MAX_V];             //记录最短路的路径,弃用path[0]


typedef struct {            //图的存储结构
	int numV;		  	 		//顶点数量
	int numE;           		//边的的数量
	char city[MAX_V][10];		 	//保存城市节点信息
	int edges[MAX_V][MAX_V];   	//保存边的权值,弃用edges[0][] ,edge[][0]
} Graph;

struct Data {                   //用于读取city_info.csv文件的结构体
	char city[MAX_V][10];
	char v1[MAX_E][10];
	char v2[MAX_E][10];
	int w[MAX_E];
	int numV, numE;
} data;

//查找城市对应的索引值
int findIndex(Graph *G, char *a);
//读取文件info.csv(城市、路径)
void readCsv(Data &data);
//构建城市交通网络
void CreateGraph(Graph *G) ;
//添加城市节点
void add_city() ;
//删除城市节点
void remove_city();
//增加城市间的路径
void add_path();
//删除城市路径
void remove_path();
//修改路径的权值
void modify_weight();
//打印图的基本信息及其邻接矩阵
void printGraph(Graph *G);
//Dijkstra求最短路径并打印
void Dijkstra(Graph *G);
//界面
void show(Graph *G);


//查找城市对应的索引值
int findIndex(Graph *G, char *a) {
	int i;
	for(i = 1; i <= G->numV; i ++)
		if(strcmp(G->city[i], a) == 0) //相等返回1
			return i;
	return -1;
}


//读取文件info.csv(城市、路径)
void readCsv(Data &data) {

	FILE *fp = fopen("info.csv", "r");
	if(fp == NULL) {
		printf("Failed to open the file!");
		exit(0);
	}
	data.numV = data.numE = 0;
	int i = 1;
	char line[MAX_E];
	char *res = NULL;

	if(fgets(line, sizeof(line), fp) != NULL) {              	//读取第一行，所有城市名称
		res = strtok(line, ",");
		while(res != NULL) {
			strcpy(data.city[i++], res);
			data.numV ++;
			res = strtok(NULL, ",");
		}
		data.city[data.numV][strlen(data.city[data.numV]) - 1] = 0; //去除最后一个字符的\n
	}

	i = 1;
	while(fgets(line, sizeof(line), fp) != NULL) {      //第二行开始，读取路径信息

		data.numE++;
		res = strtok(line, ",");   //以逗号对字符串line进行分割
		while(res != NULL) {

			strcpy(data.v1[i], res);        //读取城市v1
			res = strtok(NULL, ",");

			strcpy(data.v2[i], res);        //读取城市v2
			res = strtok(NULL, ",");

			data.w[i] = atoi(res);          //读取权值w
			res = strtok(NULL, ",");

			i++;
			res = strtok(NULL, ",");        //http://www.cnblogs.com/stemon/p/4013264.html
		}
	}
	fclose (fp);
}


//构建城市交通网络
void CreateGraph(Graph *G) {

	int i, j, v1, v2;
	readCsv(data);

	//城市数，路径数初始化
	G->numE = data.numE;
	G->numV = data.numV;

	//城市名初始化
	for(i = 1; i <= G->numV; i ++)
		strcpy(G->city[i], data.city[i]);

	//邻接矩阵的初始化
	for(i = 1; i <= G->numV; i ++)
		for(j = 1; j <= G->numV; j ++)
			if(i == j)	G->edges[i][j] = 0;
			else	G->edges[i][j] = INF;

	//邻接矩阵的赋值
	for(int i = 1; i <= G->numE; i ++) {
		v1 = findIndex(G, data.v1[i]);
		v2 = findIndex(G, data.v2[i]);
		G->edges[v1][v2] = data.w[i];
		G->edges[v2][v1] = data.w[i];
	}
}


//添加城市节点
void add_city() {//https://blog.csdn.net/z735640642/article/details/84351454

	int i = INF;
	char t[5] = {'0'};
	char line[MAX_E];
	char v[10];

	while(i--) {

		printf("\t(按0退出)请输入要添加的城市节点<字符型>:");
		cin >> v;
		if((strcmp(v, t) == 0))break;   //输入0，跳出循环

		FILE *fp =fopen("info.csv", "r");//只读
		FILE *fp2 = fopen("tmp.csv", "wb+");//wb+ 打开可读写文件，若文件存在，则文件长度清零，即文件内容会消失，若文件不存在则建立该文件
		if(fp == NULL || fp2 == NULL) {
			printf("Failed to open the file!");
			exit(0);
		}
		fgets(line, sizeof(line), fp);   //读入第一行

		if(strstr(line, v) == NULL) { //若输入字符已存在，则添加失败

			line[strlen(line)-1] = ',';
			strcat(line, v);        //将第一行和输入的城市v拼接
			line[strlen(line)] = '\n';
			fputs(line, fp2);       //将拼接好的line[]写入fp2中

			while(fgets(line, sizeof(line), fp))   //将剩下的边的信息逐行写入fp2中
				fputs(line, fp2);
			cout << endl;
			printf("\t添加成功！\n");
			cout << endl;
			fclose(fp);
			fclose(fp2);
			remove("info.csv");             //删除info.csv
			rename("tmp.csv", "info.csv");    //tmp.csv重命名为info.csv

		} else {
			cout << endl;
			printf("\t添加失败！该城市已存在，请重新输入。\n");
			cout << endl;
			fclose(fp);
			fclose(fp2);
		}


	}

}


//删除城市节点
void remove_city() {

	int l = INF;
	int i, j, k, q;
	char v[10];
	char line[MAX_E], new_line[MAX_E];

	while(l--) {
		printf("\t(按0退出)请输入被删的城市节点v : ");
		cin >> v;
		if((strcmp(v, "0") == 0))	break;//输入0退出循环

		FILE *fp =fopen("info.csv", "r");
		FILE *fp2 = fopen("tmp.csv", "wb+");//wb+ 打开可读写文件，若文件存在，则文件长度清零，即文件内容会消失，若文件不存在则建立该文件
		if(fp == NULL) {
			printf("Failed to open the file!");
			exit(0);
		}
		fgets(line, sizeof(line), fp);   //读入第一行
		char *p = strstr(line, v);		 //strstr()返回v在line中首次出现的地址

		if(strstr(line, v) != NULL) { //若要删除的城市存在

			p = p + strlen(v) + 1;

			i = k = j = 0;
			//删除第一行的待删城市

			while(line[i] != '\0') {
				if(!(line[i] - v[j]) && !(line[i + 1] - v[j + 1]))
					i += strlen(v) ;//如果v中的两个字符同时与line中对应,则跳过v
				else
					new_line[k++] = line[i];
				i++;//跳过','
			}

			if(strcmp(p, "\0") == 0) { //如果v为最后一个城市
				new_line[k-1] = '\n';//',' 改为 '\n'
				new_line[k] = '\0';
			} else {//如果v不是最后一个城市
				new_line[k] = '\0'; //闭合字符串
			}
			//cout << new_line  << endl;
			fputs(new_line, fp2);

			//删除所有与被删城市相关的路径
			while(fgets(line, sizeof(line), fp)) {  //逐行写入fp2中
				if(strstr(line, v) == NULL) //不包含城市v的行,读入fp2中
					fputs(line, fp2);
			}
			cout << endl;
			cout << "\t删除成功！" << endl;
			cout << endl;
			fclose(fp);
			fclose(fp2);
			remove("info.csv");             //删除info.csv
			rename("tmp.csv", "info.csv");    //tmp.csv重命名为info.csv

		} else {
			cout << endl;
			printf("\t删除失败！该城市不存在，请重新输入。\n");
			cout << endl;
			fclose(fp);
			fclose(fp2);
		}
	}

}


//增加城市间的路径
void add_path() {

	int i = INF;
	int w;
	char new_w[10];
	char v1[10], v2[10];
	char line[MAX_E], newline[MAX_E];

	while(i--) {

		printf("\t(按0退出)请输入要添加的城市路线的信息i,j,w(以空格分隔):");
		cin >> v1 ;
		if(strcmp(v1, "0") == 0)	break;//输入0退出循环
		cin >> v2 >> w;

		FILE *fp =fopen("info.csv", "a+");  //r+ 打开可读可写的文件，该文件必须存在
		if(fp == NULL) {
			printf("Failed to open the file!");
			exit(0);
		}
		fgets(newline, sizeof(newline), fp);   //读入第一行

		if(strstr(newline, v1) != NULL && strstr(newline, v2) != NULL) {  //检查路径对应的两个城市是否存在，若不存在，添加失败
			//构造字符串line符合csv文件的格式读入fp2中
			fclose(fp);
			FILE *fp =fopen("info.csv", "a+");  //对同一个文件好像fgets之后，fputs不会成功。所以重新打开文件
			itoa(w, new_w, 10);//int转char，10为10进制
			strcpy(line, v1);       //v1覆盖line
			strcat(line, ",");        //添加','
			strcat(line, v2);       //添加v2
			strcat(line, ",");        //添加','
			strcat(line, new_w);    //添加w
			strcat(line, "\n");        //添加'\n'
			fputs(line, fp);    //向fp中最后一行添加字符串line
			cout << endl;
			cout << "\t添加成功!" << endl;
			cout << endl;
		} else{
		    cout << endl;
			printf("\t添加失败！该城市不存在，请重新输入。\n");
			cout << endl;}

		fclose(fp);
	}
}


//删除城市路径
void remove_path() {

	int i = INF;
	char v1[5], v2[5];
	char line[MAX_E];
	const char *t = "0";

	while(i--) {
		printf("\t(按0退出)请输入被删的边的信息v1, v2: ");
		cin >> v1 ;
		if((strcmp(v1, t) == 0))break;			//输入0退出循环
		cin >> v2;

		FILE *fp =fopen("info.csv", "r");//只读
		FILE *fp2 = fopen("tmp.csv", "wb+");//wb+ 打开可读写文件，若文件存在，则文件长度清零，即文件内容会消失，若文件不存在则建立该文件
		if(fp == NULL) {
			printf("Failed to open the file!");
			exit(0);
		}

		fgets(line, sizeof(line), fp);   //读入第一行

		if(strstr(line, v1) != NULL && strstr(line, v2) != NULL) { //检查路径对应的两个城市是否存在，若不存在，删除失败

			fputs(line, fp2);//如果存在，读入fp2中
			while(fgets(line, sizeof(line), fp) != NULL) {//逐行读入

				if(strstr(line, v1) != NULL && strstr(line, v2) != NULL); //如果当前行同时存在两个城市，则不操作，即不读入要删除的行
				else	fputs(line, fp2);   //否则,读入
			}
			cout << endl;
			cout << "\t删除成功！" << endl;
			cout << endl;
			fclose (fp);
			fclose (fp2);
			remove("info.csv");             //删除info.csv
			rename("tmp.csv", "info.csv");    //tmp.csv重命名为info.csv

		} else {
			cout << endl;
			printf("\t删除失败！该城市不存在，请重新输入。\n");
			cout << endl;
			fclose (fp);
			fclose (fp2);
		}

	}

}


//修改路径的权值
void modify_weight() {
	int i = INF;
	int w;
	char new_w[10];
	char v1[5], v2[5];
	char line[MAX_E];
	const char *t = "0";


	while(i--) {
		printf("\t(按0退出)请输入修改路径的信息v1, v2，w: ");
		cin >> v1 ;
		if((strcmp(v1, t) == 0))break;			//输入0退出循环
		cin >> v2 >> w;

		FILE *fp =fopen("info.csv", "r");//只读
		FILE *fp2 = fopen("tmp.csv", "wb+");//wb+ 打开可读写文件，若文件存在，则文件长度清零，即文件内容会消失，若文件不存在则建立该文件
		if(fp == NULL) {
			printf("Failed to open the file!");
			exit(0);
		}

		fgets(line, sizeof(line), fp);   //读入第一行

		if(strstr(line, v1) != NULL && strstr(line, v2) != NULL) { //检查路径对应的两个城市是否存在，若不存在，修改失败

			fputs(line, fp2);//第一行读入fp2中
			while(fgets(line, sizeof(line), fp) != NULL) {//逐行读入

				if(strstr(line, v1) != NULL && strstr(line, v2) != NULL) { //如果当前行同时存在两个城市，则修改line后读入
					//构造字符串line符合csv文件的格式读入fp2中
					itoa(w, new_w, 10);//int转char，10为10进制
					strcpy(line, v1);//v1覆盖line
					strcat(line, ",");//添加','
					strcat(line, v2);//添加v2
					strcat(line, ",");//添加','
					strcat(line, new_w); //添加w
					strcat(line, "\n"); //添加'\n'
					fputs(line, fp2);    //向fp中读入修改后的line
				} else
					fputs(line, fp2); //否则,直接读入
			}
			cout << endl;
			cout << "\t修改成功!" << endl;
			cout << endl;
			fclose (fp);
			fclose (fp2);
			remove("info.csv");             //删除info.csv
			rename("tmp.csv", "info.csv");    //tmp.csv重命名为info.csv

		} else {
			cout << endl;
			printf("\t删除失败！该城市不存在，请重新输入。\n");
			cout << endl;
			fclose (fp);
			fclose (fp2);
		}
	}

}



//打印图的基本信息及其邻接矩阵
void printGraph(Graph *G) {

	cout << "\t城市总数：" << G->numV << endl;
	cout << "\t城市路线数：" << G->numE << endl;
	cout << "\t邻接矩阵为：" << endl;
	cout << endl;

	int i, j;
	cout << " \t        ";
	for(i = 1 ; i <= G->numV; i ++)
		cout << G->city[i] << "\t" ; 
	cout << endl;

	for(i = 1 ; i <= G->numV; i ++) {
		cout << "\t" << G->city[i] << "\t";//
		for(j = 1; j <= G->numV; j ++) {

			if(G->edges[i][j] == INF)
				printf("∞\t");
			else
				printf("%d\t", G->edges[i][j]);
		}
		cout << endl;
	}
	cout << endl;
}


//Dijkstra求最短路径并打印
void Dijkstra(Graph *G) {	//从源点from到目标点to
	int i, j;
	int k = INF;
	const char *t = "0";
	char start[10], end[10];

	while(k--) {
		printf("\t(按0退出)请输入起点和终点(start, end): ");
		cin >> start;
		if(strcmp(start, t) == 0 ) break;//输入'0', 则退出此函数
		cin >> end;

		int from = findIndex(G, start);  //找到start对应的索引
		int to = findIndex(G, end);     //找到end对应的索引

		if(from != -1 && to != -1) { //判断节点start,end是否存在

			memset(visit, 0, sizeof(visit));
			memset(dis, 0, sizeof(dis));
			memset(path, 0, sizeof(path));

			for(i = 1 ; i <= G->numV ; i ++) {	//初始化

				dis[i] = G->edges[from][i];	//先假设源点到其他点的距离
				visit[i] = 0; 		  	 	//一开始每个节点都没被访问
				path[i] = -1;
			}

			for(i = 1 ; i < G->numV ; i ++) {	//对除源点的每一个点进行最短计算

				int min = INF;  			//记录最小的dis[i]
				int pos;  					//记录min的索引
				for(j = 1 ; j <= G->numV ; ++j) {
					if(!visit[j] && min > dis[j]) {
						pos = j;
						min = dis[j];
					}
				}
				visit[pos] = 1;    			//记录节点pos被访问过
				for(j = 1 ; j <= G->numV ; ++j) {
					if(!visit[j] && (dis[j] > (dis[pos] + G->edges[pos][j]))) { //如果j节点没有被访问过&&j节点到源节点的最短路径>pos节点到源节点的最短路径+pos节点到j节点的路径
						dis[j] = dis[pos] + G->edges[pos][j];	//更新j节点到源节点的最短路径
						path[j] = pos;
					}
				}
			}

			//利用栈打印逆序存储在path[]的路径
			//https://blog.csdn.net/renzijing/article/details/80572549
			stack<int> q;
			int p = to;
			while(path[p] != -1) {
				q.push(p);
				p = path[p];
			}
			q.push(p);
			if(dis[to]!=INF)
			{
			cout << endl;
			cout << "\t\t"<<G->city[from] << "-->" << G->city[to] << " ";
			cout << "\t最短路径距离为"<< ":" << dis[to] <<" (km) "<< endl;
			cout << "\t\t路线是：" ;
			cout << G->city[from];
			while(!q.empty()) {
				cout << "-->" << G->city[q.top()];
				q.pop();
			}
			cout << endl;}
			else{
				cout << endl;
				printf("\t\t查询失败！该路径不存在！");
				cout << endl;
			}
            cout << endl;
		} else{
			cout << endl;
			printf("\t\t查询失败！输入城市有误！\n");
			cout << endl;
		}
			
	}
}
//cin>>a;
//	if(a=='q')
//		system("cls");

//界面
void show(Graph *G) {

	cout<<"   ---------------------------------------------------  "<<endl;
	cout<<"   |           欢迎使用城市最短路径查询系统          | "<<endl;
	cout<<"   |                  1--查询最短路线                | "<<endl;
	cout<<"   |                  2--增加城市                    | "<<endl;
	cout<<"   |                  3--增加路线                    | "<<endl;
	cout<<"   |                  4--删除城市                    | "<<endl;
	cout<<"   |                  5--删除路线                    | "<<endl;
	cout<<"   |                  6--修改权值                    | "<<endl;
	cout<<"   |                  7--打印路线图                  | "<<endl;
	cout<<"   |                  8--CLEAR                       | "<<endl;
	cout<<"   |                  00--EXIT                       | "<<endl;
	cout<<"   ---------------------------------------------------  "<<endl;
	int a = 1;
	while(a != 00 ) {
		CreateGraph(G);
		cout << endl;
		cout << " Enter: " ;
//		cout << "find 0, printGraph 5,  exit 9" << endl;
//		cout << "addCity 1, addPath 2, removeCity 3, removePath 4" << endl;
		cin >> a ;
		switch(a) {
			case 1:
				Dijkstra(G);
				break;
			case 2:
				add_city();//
				break;
			case 3:
				add_path();//
				break;
			case 4:
				remove_city();//
				break;
			case 5:
				remove_path();//
				break;
			case 6:
				modify_weight();//
				break;
			case 7:
				printGraph(G);
				break;
			case 8:
				system("cls");
	cout<<"   ---------------------------------------------------  "<<endl;
	cout<<"   |           欢迎使用城市最短路径查询系统          | "<<endl;
	cout<<"   |                  1--查询最短路线                | "<<endl;
	cout<<"   |                  2--增加城市                    | "<<endl;
	cout<<"   |                  3--增加路线                    | "<<endl;
	cout<<"   |                  4--删除城市                    | "<<endl;
	cout<<"   |                  5--删除路线                    | "<<endl;
	cout<<"   |                  6--修改权值                    | "<<endl;
	cout<<"   |                  7--打印路线图                  | "<<endl;
	cout<<"   |                  8--清屏                        | "<<endl;
	cout<<"   |                  00--EXIT                       | "<<endl;
	cout<<"   ---------------------------------------------------  "<<endl;
				break;
			case 00:
				break;
			default:
				printf("输入格式错误，请重新输入!\n");
		}
	}
}


int main() {
	Graph G;
	show(&G);
	return 0;
}


//	基本功能:无向图的邻接矩阵存储,Dijkstra算法实现城市间的最短路径计算
//	        1.城市,路径的添加、删除和路径权值的修改等5个功能都是基于对文件info.csv的修改
//	        2.本程序大部分数组弃用0号元素
//	        3.dijkstra()函数中的打印路径参考自：https://blog.csdn.net/renzijing/article/details/80572549
//	date:2018.12.16
